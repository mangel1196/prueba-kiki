"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Setter = exports.SetterDecorator = void 0;
const typescript_1 = __importStar(require("typescript"));
const Utility_1 = require("../Utility");
// A property decorator to create a setter method dynamically up to the property name.
class SetterDecorator {
    static NAME = 'Setter';
    getClassDeclaration(...params) {
        throw new Error('Setter decorator not supported to class.');
    }
    getPropertyDeclaration(...params) {
        return (target, propertyKey) => {
            if (typeof propertyKey === 'symbol')
                propertyKey.toString();
            const propertyName = propertyKey;
            const methodName = this.getSetterName(propertyName);
            // Define setter method to the target class prototype,
            // that set a given value to their own property instance
            Object.defineProperty(target, methodName, {
                value: function (value) {
                    this[propertyName] = value;
                },
            });
        };
    }
    createMethodSignature(propertyName, returnType) {
        return typescript_1.default.factory.createMethodSignature(undefined, // No need to have a modifer for interface in declaration merging
        this.getSetterName(propertyName), undefined, undefined, [typescript_1.default.factory.createParameterDeclaration(undefined, undefined, propertyName, undefined, returnType)], typescript_1.default.factory.createKeywordTypeNode(typescript_1.SyntaxKind.VoidKeyword));
    }
    getSetterName(propertyName) {
        return `set${(0, Utility_1.capitalize)(propertyName)}`;
    }
}
exports.SetterDecorator = SetterDecorator;
// Decorator alias
exports.Setter = new SetterDecorator().getPropertyDeclaration();
