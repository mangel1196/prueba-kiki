import { Container } from "../dto/container";
import { ContainerService } from "./container.service"; 

 
// Generated by CodiumAI

describe('ContainerService', () => {

  // Tests that selectContainers returns an empty string when the maximum load is less than the cost of all containers
  it('should return an empty string when the maximum load is less than the cost of all containers', () => {
        // Arrange
        const maxLoad = 10;
        const containers = [
          new Container('Container1', 11, 5),
          new Container('Container2', 12, 6),
          new Container('Container3', 13, 7)
        ];
        const containerService = new ContainerService();

        // Act
        const result = containerService.selectContainers(maxLoad, containers);
  
        console.log(JSON.stringify(containers));
        // Assert
        expect(result).toBe('');
      });

  // Tests that selectContainers returns an empty string when there are no containers available
  it('should return an empty string when there are no containers available', () => {
    // Arrange
    const maxLoad = 10;
    const containers = [];
    const containerService = new ContainerService();

    // Act
    const result = containerService.selectContainers(maxLoad, containers);

    // Assert
    expect(result).toBe("");
  });

  // Tests that selectContainers returns an empty string when all containers exceed the boat's maximum load
  it('should return an empty string when all containers exceed the boat\'s maximum load', () => {
    // Arrange
    const maxLoad = 10;
    const containers = [
      new Container("Container1", 11, 5),
      new Container("Container2", 12, 6),
      new Container("Container3", 13, 7)
    ];
    const containerService = new ContainerService();

    // Act
    const result = containerService.selectContainers(maxLoad, containers);

    // Assert
    expect(result).toBe("");
  });

  // Tests that selectContainers returns the names of the containers that fit in the boat's maximum load when all containers have the same value
  it('should return the names of the containers that fit in the boat\'s maximum load when all containers have the same value', () => {
    // Arrange
    const maxLoad = 10;
    const containers = [
      new Container("Container1", 5, 5),
      new Container("Container2", 6, 5),
      new Container("Container3", 7, 5)
    ];
    const containerService = new ContainerService();

    // Act
    const result = containerService.selectContainers(maxLoad, containers);
 
    // Assert
    expect(result).toBe("Container1");
  });

  // Tests that selectContainers returns the names of the containers that maximize the boat's value when there are multiple containers available and they fit in the boat's maximum load
  it('should return the names of the containers that maximize the boat\'s value when there are multiple containers available and they fit in the boat\'s maximum load', () => {
    // Arrange
    const maxLoad = 10;
    const containers = [
      new Container("Container1", 5, 5),
      new Container("Container2", 6, 10),
      new Container("Container3", 7, 7)
    ];
    const containerService = new ContainerService();

    // Act
    const result = containerService.selectContainers(maxLoad, containers);

    // Assert
    expect(result).toBe("Container2");
  });
});
